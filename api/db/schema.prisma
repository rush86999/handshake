datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
  previewFeatures = ["interactiveTransactions"]
}

generator zod {
  provider      = "zod-prisma"
  output        = "./zod"
  imports       = "./zod-utils"
  relationModel = "default"
}

enum SchedulingType {
  ROUND_ROBIN @map("roundRobin")
  COLLECTIVE  @map("collective")
}

enum PeriodType {
  UNLIMITED @map("unlimited")
  ROLLING   @map("rolling")
  RANGE     @map("range")
}

model EventType {
  id                      String                     @id @default(uuid())
  /// @zod.nonempty()
  title                   String
  /// @zod.custom(imports.eventTypeSlug)
  slug                    String
  description             String?
  position                Int                     @default(0)
  /// @zod.custom(imports.eventTypeLocations)
  locations               Json?
  length                  Int
  hidden                  Boolean                 @default(false)
  users                   User[]                  @relation("user_eventtype")
  owner                   User?                   @relation("owner", fields: [userId], references: [id], onDelete: Cascade)
  userId                  String?
  team                    Team?                   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId                  String?
  hashedLink              HashedLink?
  bookings                Booking[]
  availability            Availability[]
  webhooks                Webhook[]
  destinationCalendar     DestinationCalendar?
  eventName               String?
  customInputs            EventTypeCustomInput[]
  timeZone                String?
  periodType              PeriodType              @default(UNLIMITED)
  periodStartDate         DateTime?
  periodEndDate           DateTime?
  periodDays              Int?
  periodCountCalendarDays Boolean?
  requiresConfirmation    Boolean                 @default(false)
  /// @zod.custom(imports.recurringEventType)
  recurringEvent          Json?
  disableGuests           Boolean                 @default(false)
  hideCalendarNotes       Boolean                 @default(false)
  minimumBookingNotice    Int                     @default(120)
  beforeEventBuffer       Int                     @default(0)
  afterEventBuffer        Int                     @default(0)
  seatsPerTimeSlot        Int?
  schedulingType          SchedulingType?
  schedule                Schedule?               @relation(fields: [scheduleId], references: [id])
  scheduleId              Int?
  price                   Int                     @default(0)
  currency                String                  @default("usd")
  slotInterval            Int?
  metadata                Json?
  /// @zod.custom(imports.successRedirectUrl)
  successRedirectUrl      String?
  workflows               WorkflowsOnEventTypes[]
  createdDate             DateTime                @default(now()) @map(name: "created")
  updatedDate             DateTime                @default(now()) @map(name: "updated")
  @@unique([userId, slug])
  @@unique([teamId, slug])
}

model User {
  id                   String                  @id @default(uuid())
  username             String?                 @unique
  name                 String?
  /// @zod.email()
  email                String                  @unique
  emailVerified        DateTime?
  password             String?
  bio                  String?
  avatar               String?
  timeZone             String                  @default("Europe/London")
  weekStart            String                  @default("Sunday")
  bufferTime           Int                     @default(0)
  hideBranding         Boolean                 @default(false)
  theme                String?
  createdDate          DateTime                @default(now()) @map(name: "created")
  trialEndsAt          DateTime?
  eventTypes           EventType[]             @relation("user_eventtype")
  credentials          Credential[]
  teams                Membership[]
  bookings             Booking[]
  schedules            Schedule[]
  defaultScheduleId    Int?
  selectedCalendars    SelectedCalendar[]
  completedOnboarding  Boolean                 @default(false)
  locale               String?
  timeFormat           Int?                    @default(12)
  twoFactorSecret      String?
  twoFactorEnabled     Boolean                 @default(false)
  identityProvider     IdentityProvider        @default(GOOGLE)
  identityProviderId   String?
  availability         Availability[]
  invitedTo            Int?
  plan                 UserPlan                @default(TRIAL)
  webhooks             Webhook[]
  brandColor           String                  @default("#292929")
  darkBrandColor       String                  @default("#fafafa")
  // the location where the events will end up
  destinationCalendar  DestinationCalendar?
  away                 Boolean                 @default(false)
  // participate in dynamic group booking or not
  allowDynamicBooking  Boolean?                @default(true)
  /// @zod.custom(imports.userMetadata)
  metadata             Json?
  verified             Boolean?                @default(false)
  role                 UserPermissionRole      @default(USER)
  disableImpersonation Boolean                 @default(false)
  impersonatedUsers    Impersonations[]        @relation("impersonated_user")
  impersonatedBy       Impersonations[]        @relation("impersonated_by_user")
  apiKeys              ApiKey[]
  accounts             Account[]
  sessions             Session[]
  Feedback             Feedback[]
  ownedEventTypes      EventType[]             @relation("owner")
  workflows            Workflow[]
  routingForms         App_RoutingForms_Form[] @relation("routing-form")
  @@map(name: "users")
}

model Team {
  id           Int          @id @default(autoincrement())
  name         String?
  slug         String?      @unique
  logo         String?
  bio          String?
  hideBranding Boolean      @default(false)
  members      Membership[]
  eventTypes   EventType[]
}


model HashedLink {
  id          Int       @id @default(autoincrement())
  link        String    @unique()
  eventType   EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  eventTypeId Int       @unique
}

model Booking {
  id                    Int                  @id @default(autoincrement())
  uid                   String               @unique
  user                  User?                @relation(fields: [userId], references: [id])
  userId                String?
  references            BookingReference[]
  eventType             EventType?           @relation(fields: [eventTypeId], references: [id])
  eventTypeId           Int?
  title                 String
  description           String?
  customInputs          Json?
  startTime             DateTime
  endTime               DateTime
  attendees             Attendee[]
  location              String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime?
  status                BookingStatus        @default(ACCEPTED)
  paid                  Boolean              @default(false)
  payment               Payment[]
  destinationCalendar   DestinationCalendar? @relation(fields: [destinationCalendarId], references: [id])
  destinationCalendarId Int?
  cancellationReason    String?
  rejectionReason       String?
  dynamicEventSlugRef   String?
  dynamicGroupSlugRef   String?
  rescheduled           Boolean?
  fromReschedule        String?
  recurringEventId      String?
  smsReminderNumber     String?
  workflowReminders     WorkflowReminder[]
}

model Availability {
  id          Int        @id @default(autoincrement())
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int?
  eventType   EventType? @relation(fields: [eventTypeId], references: [id])
  eventTypeId Int?
  days        Int[]
  startTime   DateTime   @db.Time
  endTime     DateTime   @db.Time
  date        DateTime?  @db.Date
  Schedule    Schedule?  @relation(fields: [scheduleId], references: [id])
  scheduleId  Int?
}

model Webhook {
  id              String                 @id @unique
  userId          Int?
  eventTypeId     Int?
  subscriberUrl   String
  payloadTemplate String?
  createdAt       DateTime               @default(now())
  active          Boolean                @default(true)
  eventTriggers   WebhookTriggerEvents[]
  user            User?                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventType       EventType?             @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  app             App?                   @relation(fields: [appId], references: [slug], onDelete: Cascade)
  appId           String?
  secret          String?
}

model DestinationCalendar {
  id           String         @id @default(uuid())
  integration  String
  externalId   String
  user         User?       @relation(fields: [userId], references: [id])
  userId       Int?        @unique
  booking      Booking[]
  eventType    EventType?  @relation(fields: [eventTypeId], references: [id])
  eventTypeId  String?        @unique
  credentialId String?
  credential   Credential? @relation(fields: [credentialId], references: [id])
}

model EventTypeCustomInput {
  id          Int                      @id @default(autoincrement())
  eventTypeId Int
  eventType   EventType                @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  label       String
  type        EventTypeCustomInputType
  required    Boolean
  placeholder String                   @default("")
}

model Schedule {
  id           Int            @id @default(autoincrement())
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  eventType    EventType[]
  name         String
  timeZone     String?
  availability Availability[]
}

model WorkflowsOnEventTypes {
  id          String       @id @default(uuid())
  workflow    Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId  Int
  eventType   EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  eventTypeId Int
}

model Credential {
  id                   Int                   @id @default(autoincrement())
  type                 String
  key                  Json
  user                 User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               Int?
  app                  App?                  @relation(fields: [appId], references: [slug], onDelete: Cascade)
  // How to make it a required column?
  appId                String?
  destinationCalendars DestinationCalendar[]
}


model Membership {
  teamId               Int
  userId               Int
  accepted             Boolean        @default(false)
  role                 MembershipRole
  team                 Team           @relation(fields: [teamId], references: [id])
  user                 User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  disableImpersonation Boolean        @default(false)
  @@id([userId, teamId])
}


model BookingReference {
  id                 String      @id @default(uuid())
  type               String
  uid                String
  meetingId          String?
  meetingPassword    String?
  meetingUrl         String?
  booking            Booking? @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId          Int?
  externalCalendarId String?
  deleted            Boolean?
  credentialId       Int?
}

model SelectedCalendar {
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  integration String
  externalId  String
  @@id([userId, integration, externalId])
}


enum IdentityProvider {
  CAL
  GOOGLE
  SAML
}



